<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-05T23:14:00+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">sun woo kim</title><subtitle></subtitle><entry><title type="html">site created</title><link href="http://localhost:4000/physics/2020/01/05/post.html" rel="alternate" type="text/html" title="site created" /><published>2020-01-05T02:41:09+09:00</published><updated>2020-01-05T02:41:09+09:00</updated><id>http://localhost:4000/physics/2020/01/05/post</id><content type="html" xml:base="http://localhost:4000/physics/2020/01/05/post.html">&lt;h2 id=&quot;collapsible-markdown&quot;&gt;collapsible markdown?&lt;/h2&gt;
&lt;details&gt;&lt;summary&gt;CLICK ME&lt;/summary&gt;
&lt;p&gt;
&lt;h4 id=&quot;yes-even-hidden-code-blocks&quot;&gt;yes, even hidden code blocks!&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;Excerpt with multiple paragraphs&lt;/p&gt;
&lt;h1 id=&quot;hello&quot;&gt;Hello&lt;/h1&gt;
&lt;p&gt;Let's test some inline math $x$, $y$, $x_1$, $y_1$.&lt;/p&gt;
&lt;p&gt;Now a inline math with special character: $|\psi\rangle$, $x'$, $x^*$.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Test a display math:
$$
|\psi_1\rangle = a|0\rangle + b|1\rangle
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test a display math with equation number:
\begin{equation} \label{hello}
|\psi_1\rangle = a|0\rangle + b|1\rangle
\end{equation}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(\ref{hello})&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Test a display math with equation number:
$$
\begin{align}
|\psi_1\rangle &amp;amp;= a|0\rangle + b|1\rangle \
|\psi_2\rangle &amp;amp;= c|0\rangle + d|1\rangle
\end{align}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test a display math with equation number:
\begin{align}
|\psi_1\rangle &amp;amp;= a|0\rangle + b|1\rangle \
|\psi_2\rangle &amp;amp;= c|0\rangle + d|1\rangle
\end{align}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And test a display math without equaltion number:
\begin{align*}
|\psi_1\rangle &amp;amp;= a|0\rangle + b|1\rangle \
|\psi_2\rangle &amp;amp;= c|0\rangle + d|1\rangle
\end{align*}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">collapsible markdown?</summary></entry><entry><title type="html">site created</title><link href="http://localhost:4000/jekyll/update/2020/01/05/welcome-to-jekyll-copy.html" rel="alternate" type="text/html" title="site created" /><published>2020-01-05T02:41:09+09:00</published><updated>2020-01-05T02:41:09+09:00</updated><id>http://localhost:4000/jekyll/update/2020/01/05/welcome-to-jekyll%20copy</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/01/05/welcome-to-jekyll-copy.html">&lt;p&gt;$$f(x)$$&lt;/p&gt;
&lt;p&gt;Hello $f(x)$ there.&lt;/p&gt;
&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;
&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code&gt;MONTH&lt;/code&gt; and &lt;code&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;
&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;what&quot;&gt;What&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;hello&lt;/li&gt;
&lt;li&gt;there
&lt;ol&gt;
&lt;li&gt;One&lt;/li&gt;
&lt;li&gt;Two&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">$$f(x)$$</summary></entry><entry><title type="html">generalised wick’s theorem</title><link href="http://localhost:4000/physics/2019/12/06/generalisedwick.html" rel="alternate" type="text/html" title="generalised wick's theorem" /><published>2019-12-06T22:00:00+09:00</published><updated>2019-12-06T22:00:00+09:00</updated><id>http://localhost:4000/physics/2019/12/06/generalisedwick</id><content type="html" xml:base="http://localhost:4000/physics/2019/12/06/generalisedwick.html">&lt;p&gt;Required level: 4th year theoretical physics.&lt;/p&gt;
&lt;p&gt;If you had an undergraduate or an introductory course in quantum field theory, you were probably introduced to Wick's theorem, which states that the time-ordered product can be transformed into a sum of normal-ordered products:&lt;/p&gt;
&lt;p&gt;\begin{align} \label{hello}
\mathcal{T}\left\{ \hat{\phi}(x_1) \dots \hat{\phi}(x_n) \right\} = \mathcal{N}\left\{ \hat{\phi}(x_1) \hat{\phi}(x_n) \dots \hat{\phi} + \text{all possible contractions} \right\},
\end{align}&lt;/p&gt;
&lt;p&gt;where $\mathcal{T}\{\dots \}$ refers to the time-ordering and $\mathcal{N}\{\dots\}$ refers to normal-ordering.&lt;/p&gt;
&lt;p&gt;This is one version of Wick's theorem; there is another generalised version which I think makes clear what Wick's theorem is doing.&lt;/p&gt;
&lt;p&gt;For this version, we state is with respect to some (many-body) state $\lvert \Psi \rangle$.&lt;/p&gt;
&lt;p&gt;For any operator $\hat{O}$, we split it into three parts:&lt;/p&gt;
&lt;p&gt;$$ \hat{O} = \hat{O}^0 + \hat{O}^+ + \hat{O}^-,$$&lt;/p&gt;
&lt;p&gt;(the $0$ does not indicate power) such that&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^0 = \text{cst.},$$&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^- \lvert \Psi \rangle = 0,$$&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^+ \langle \Psi \rvert = 0.$$&lt;/p&gt;
&lt;p&gt;One way to explicitly construct such operators (and how it is conventionally done) is&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^0 = \langle \hat{O} \rangle,$$&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^+ = \left(\hat{P} - \hat{O}^0\right)(\mathbb{1} - \hat{P}), $$&lt;/p&gt;
&lt;p&gt;$$ \hat{O}^+ = \left(\mathbb{1} - \hat{P}\right) \hat{O} \hat{P}, $$&lt;/p&gt;
&lt;p&gt;where $\langle \dots \rangle := \langle \Psi \rvert \dots \lvert \Psi \rangle$, and the projector $\hat{P} := \lvert \Psi \rangle \langle \Psi \rvert$.&lt;/p&gt;
&lt;!-- &lt;details&gt;&lt;summary&gt;time ordering&lt;/summary&gt;
&lt;p&gt;

#### yes, even hidden code blocks!

```python
print(&quot;hello world!&quot;)
```

&lt;/p&gt;
&lt;/details&gt; --&gt;
&lt;!-- 
{% highlight c++ %}  &lt;br/&gt; code code code &lt;br/&gt; {% endhighlight %}


Produces something like this:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;input a string: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;charArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 --&gt;
&lt;!-- &lt;hr&gt;

Pug heirloom High Life vinyl swag, single-origin coffee four dollar toast taxidermy reprehenderit fap distillery master cleanse locavore. Est anim sapiente leggings Brooklyn ea. Thundercats locavore excepteur veniam eiusmod. Raw denim Truffaut Schlitz, migas sapiente Portland VHS twee Bushwick Marfa typewriter retro id keytar.

&lt;blockquote&gt;
    We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another.
    —Anais Nin
&lt;/blockquote&gt; --&gt;</content><author><name></name></author><summary type="html">Required level: 4th year theoretical physics.</summary></entry></feed>